# Kubernetes Manifests for MLOps Pipeline
---
apiVersion: v1
kind: Namespace
metadata:
  name: mlops
  labels:
    name: mlops
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlops-config
  namespace: mlops
data:
  MODEL_NAME: "heart_disease_classifier"
  MODEL_STAGE: "Production"
  MLFLOW_TRACKING_URI: "http://mlflow:5000"
  LOG_LEVEL: "INFO"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: mlops-secrets
  namespace: mlops
type: Opaque
stringData:
  db-password: "your-db-password"
  api-key: "your-api-key"
---
# MLflow Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlops
  labels:
    app: mlflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      containers:
      - name: mlflow
        image: mlflow/mlflow:latest
        ports:
        - containerPort: 5000
        env:
        - name: MLFLOW_BACKEND_STORE_URI
          value: "sqlite:///mlflow.db"
        - name: MLFLOW_DEFAULT_ARTIFACT_ROOT
          value: "/mlflow/artifacts"
        volumeMounts:
        - name: mlflow-data
          mountPath: /mlflow
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mlflow-data
        persistentVolumeClaim:
          claimName: mlflow-pvc
---
# MLflow PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlflow-pvc
  namespace: mlops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# MLflow Service
apiVersion: v1
kind: Service
metadata:
  name: mlflow
  namespace: mlops
spec:
  selector:
    app: mlflow
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  type: ClusterIP
---
# Heart Disease API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heart-disease-api
  namespace: mlops
  labels:
    app: heart-disease-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: heart-disease-api
  template:
    metadata:
      labels:
        app: heart-disease-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api
        image: heart-disease-api:latest
        ports:
        - containerPort: 80
        env:
        - name: MODEL_NAME
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: MODEL_NAME
        - name: MODEL_STAGE
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: MODEL_STAGE
        - name: MLFLOW_TRACKING_URI
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: MLFLOW_TRACKING_URI
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
---
# Heart Disease API Service
apiVersion: v1
kind: Service
metadata:
  name: heart-disease-service
  namespace: mlops
  labels:
    app: heart-disease-api
spec:
  selector:
    app: heart-disease-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: heart-disease-api-hpa
  namespace: mlops
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: heart-disease-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: heart-disease-api-netpol
  namespace: mlops
spec:
  podSelector:
    matchLabels:
      app: heart-disease-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mlflow
    ports:
    - protocol: TCP
      port: 5000
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
# Prometheus ServiceMonitor for monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: heart-disease-api-monitor
  namespace: mlops
  labels:
    app: heart-disease-api
spec:
  selector:
    matchLabels:
      app: heart-disease-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: heart-disease-api-ingress
  namespace: mlops
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.mlops.example.com
    secretName: heart-disease-api-tls
  rules:
  - host: api.mlops.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heart-disease-service
            port:
              number: 80
---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: heart-disease-api-alerts
  namespace: mlops
  labels:
    app: heart-disease-api
spec:
  groups:
  - name: heart-disease-api.rules
    rules:
    - alert: HighPredictionLatency
      expr: histogram_quantile(0.95, rate(prediction_duration_seconds_bucket{job="heart-disease-api"}[5m])) > 0.5
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High prediction latency detected"
        description: "95th percentile latency is above 500ms for 2 minutes"
    
    - alert: ModelAccuracyDrop
      expr: model_accuracy{job="heart-disease-api"} < 0.70
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Model accuracy has dropped below threshold"
        description: "Model accuracy is {{ $value }}, below the 0.70 threshold"
    
    - alert: HighErrorRate
      expr: rate(http_requests_total{job="heart-disease-api",status=~"5.."}[5m]) / rate(http_requests_total{job="heart-disease-api"}[5m]) > 0.05
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value | humanizePercentage }}"
    
    - alert: PodCrashLooping
      expr: rate(kube_pod_container_status_restarts_total{namespace="mlops",pod=~"heart-disease-api-.*"}[5m]) > 0
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "Pod is crash looping"
        description: "Pod {{ $labels.pod }} is restarting frequently"
---
# CronJob for model retraining
apiVersion: batch/v1
kind: CronJob
metadata:
  name: model-retrain
  namespace: mlops
spec:
  schedule: "0 2 * * 0"  # Weekly at 2 AM on Sunday
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: retrain
            image: heart-disease-trainer:latest
            env:
            - name: MLFLOW_TRACKING_URI
              valueFrom:
                configMapKeyRef:
                  name: mlops-config
                  key: MLFLOW_TRACKING_URI
            - name: MODEL_NAME
              valueFrom:
                configMapKeyRef:
                  name: mlops-config
                  key: MODEL_NAME
            command:
            - python
            - mlops_implementation_example.py
            resources:
              requests:
                memory: "1Gi"
                cpu: "500m"
              limits:
                memory: "2Gi"
                cpu: "1000m"
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1